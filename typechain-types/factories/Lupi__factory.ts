/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lupi, LupiInterface } from "../Lupi";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_gameVersion",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "guess",
        type: "int256",
      },
    ],
    name: "commitGuess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "endGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getGuessCounter",
    outputs: [
      {
        internalType: "int256",
        name: "counter",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLowestGuess",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e8f38038062000e8f833981810160405281019062000037919062000294565b620000836040518060400160405280601c81526020017f4465706c6f79696e67204c7570692047616d652056657273696f6e3a0000000081525082620000a360201b620005741760201c565b80600390805190602001906200009b92919062000172565b5050620004e1565b620001458282604051602401620000bc9291906200031a565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200014960201b60201c565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054620001809062000406565b90600052602060002090601f016020900481019282620001a45760008555620001f0565b82601f10620001bf57805160ff1916838001178555620001f0565b82800160010185558215620001f0579182015b82811115620001ef578251825591602001919060010190620001d2565b5b509050620001ff919062000203565b5090565b5b808211156200021e57600081600090555060010162000204565b5090565b60006200023962000233846200037e565b62000355565b9050828152602081018484840111156200025257600080fd5b6200025f848285620003d0565b509392505050565b600082601f8301126200027957600080fd5b81516200028b84826020860162000222565b91505092915050565b600060208284031215620002a757600080fd5b600082015167ffffffffffffffff811115620002c257600080fd5b620002d08482850162000267565b91505092915050565b6000620002e682620003b4565b620002f28185620003bf565b935062000304818560208601620003d0565b6200030f81620004d0565b840191505092915050565b60006040820190508181036000830152620003368185620002d9565b905081810360208301526200034c8184620002d9565b90509392505050565b60006200036162000374565b90506200036f82826200043c565b919050565b6000604051905090565b600067ffffffffffffffff8211156200039c576200039b620004a1565b5b620003a782620004d0565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620003f0578082015181840152602081019050620003d3565b8381111562000400576000848401525b50505050565b600060028204905060018216806200041f57607f821691505b6020821081141562000436576200043562000472565b5b50919050565b6200044782620004d0565b810181811067ffffffffffffffff82111715620004695762000468620004a1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61099e80620004f16000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634b3f927d1461005c5780636cbc2ded146100785780638e7ea5b214610082578063da421b52146100a0578063de8b482a146100be575b600080fd5b6100766004803603810190610071919061067e565b6100dc565b005b610080610204565b005b61008a610536565b60405161009791906106fe565b60405180910390f35b6100a8610560565b6040516100b59190610719565b60405180910390f35b6100c661056a565b6040516100d39190610719565b60405180910390f35b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061012a610639565b8181600001818152505033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060018190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505060016002546101fa9190610787565b6002819055505050565b600061270f90506000806000905060005b6001805490508110156104e157836001828154811061025d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016000015412156104c357600181815481106102af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600001549350600181815481106102fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060005b6001805490508110156104c157846001828154811061037c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600001541280610487575084600182815481106103d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016000015414801561048657508373ffffffffffffffffffffffffffffffffffffffff166001828154811061043b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b5b15610491576104c1565b600180805490506104a2919061081b565b8114156104ae57600192505b80806104b9906108c8565b915050610334565b505b81156104ce576104e1565b80806104d9906108c8565b915050610215565b508015610531578260048190555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600454905090565b6000600254905090565b61060c828260405160240161058a929190610734565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610610565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60008135905061067881610951565b92915050565b60006020828403121561069057600080fd5b600061069e84828501610669565b91505092915050565b6106b08161084f565b82525050565b6106bf81610861565b82525050565b60006106d08261076b565b6106da8185610776565b93506106ea818560208601610895565b6106f381610940565b840191505092915050565b600060208201905061071360008301846106a7565b92915050565b600060208201905061072e60008301846106b6565b92915050565b6000604082019050818103600083015261074e81856106c5565b9050818103602083015261076281846106c5565b90509392505050565b600081519050919050565b600082825260208201905092915050565b600061079282610861565b915061079d83610861565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156107d8576107d7610911565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156108105761080f610911565b5b828201905092915050565b60006108268261088b565b91506108318361088b565b92508282101561084457610843610911565b5b828203905092915050565b600061085a8261086b565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156108b3578082015181840152602081019050610898565b838111156108c2576000848401525b50505050565b60006108d38261088b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561090657610905610911565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b61095a81610861565b811461096557600080fd5b5056fea2646970667358221220780ab55aadbfcde7aa5d80f45e464c2ce4eba2673da53779b9fdea0c659e4b3764736f6c63430008040033";

type LupiConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LupiConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lupi__factory extends ContractFactory {
  constructor(...args: LupiConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Lupi";
  }

  deploy(
    _gameVersion: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lupi> {
    return super.deploy(_gameVersion, overrides || {}) as Promise<Lupi>;
  }
  getDeployTransaction(
    _gameVersion: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gameVersion, overrides || {});
  }
  attach(address: string): Lupi {
    return super.attach(address) as Lupi;
  }
  connect(signer: Signer): Lupi__factory {
    return super.connect(signer) as Lupi__factory;
  }
  static readonly contractName: "Lupi";
  public readonly contractName: "Lupi";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LupiInterface {
    return new utils.Interface(_abi) as LupiInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Lupi {
    return new Contract(address, _abi, signerOrProvider) as Lupi;
  }
}
